'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultStyles = {
    modal: {
        position: 'fixed',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        zIndex: 1000,
        overflow: 'auto'
    },
    body: {
        padding: 20,
        backgroundColor: '#fff',
        margin: 40
    },
    background: {
        position: 'fixed',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        backgroundColor: '#000',
        opacity: 0.75,
        zIndex: 900
    }
};

var propTypes = {
    id: _propTypes2.default.string.isRequired,
    style: _propTypes2.default.object
};

var JwModal = function (_React$Component) {
    _inherits(JwModal, _React$Component);

    //--- static methods ---//

    function JwModal(props) {
        _classCallCheck(this, JwModal);

        var _this = _possibleConstructorReturn(this, (JwModal.__proto__ || Object.getPrototypeOf(JwModal)).call(this, props));

        _this.styles = _extends({}, defaultStyles);


        _this.state = { isOpen: false };

        _this.handleClick = _this.handleClick.bind(_this);

        // merge custom styles with default styles
        if (props.style) {
            _this.styles = {
                modal: _extends({}, defaultStyles.modal, props.style.modal),
                body: _extends({}, defaultStyles.body, props.style.body),
                background: _extends({}, defaultStyles.background, props.style.background)
            };
        }
        return _this;
    }

    //--- instance methods ---//

    _createClass(JwModal, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            // move element to bottom of page (just before </body>) so it can be displayed above everything else
            document.body.appendChild(this.element);

            // add this modal instance to the modal service so it's accessible from other components
            JwModal.modals.push(this);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            var _this2 = this;

            // remove this modal instance from modal service
            JwModal.modals = JwModal.modals.filter(function (x) {
                return x.props.id !== _this2.props.id;
            });
            this.element.remove();
        }
    }, {
        key: 'handleClick',
        value: function handleClick(e) {
            // close modal on background click
            if (e.target.className === 'jw-modal') {
                JwModal.close(this.props.id)(e);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement(
                'div',
                { style: { display: +this.state.isOpen ? '' : 'none' }, onClick: this.handleClick, ref: function ref(el) {
                        return _this3.element = el;
                    } },
                _react2.default.createElement(
                    'div',
                    { className: 'jw-modal', style: this.styles.modal },
                    _react2.default.createElement(
                        'div',
                        { className: 'jw-modal-body', style: this.styles.body },
                        this.props.children
                    )
                ),
                _react2.default.createElement('div', { className: 'jw-modal-background', style: this.styles.background })
            );
        }
    }]);

    return JwModal;
}(_react2.default.Component);

JwModal.modals = [];

JwModal.open = function (id) {
    return function (e) {
        e.preventDefault();

        // open modal specified by id
        var modal = JwModal.modals.find(function (x) {
            return x.props.id === id;
        });
        modal.setState({ isOpen: true });
        document.body.classList.add('jw-modal-open');
    };
};

JwModal.close = function (id) {
    return function (e) {
        e.preventDefault();

        // close modal specified by id
        var modal = JwModal.modals.find(function (x) {
            return x.props.id === id;
        });
        modal.setState({ isOpen: false });
        document.body.classList.remove('jw-modal-open');
    };
};

JwModal.propTypes = propTypes;

exports.default = JwModal;